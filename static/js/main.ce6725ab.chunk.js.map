{"version":3,"sources":["components/Container/index.js","components/Header/index.js","components/Section/index.js","components/Form/index.js","components/Tasks/index.js","components/Buttons/index.js","App.js","reportWebVitals.js","index.js"],"names":["Container","children","className","Header","title","Section","body","extraHeaderContent","Form","addNewTask","useState","newTaskContent","setNewTaskContent","textInput","useRef","onSubmit","event","preventDefault","test","trim","ref","value","placeholder","autoFocus","onChange","target","onClick","current","focus","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","App","setHideDone","setTasks","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce6725ab.chunk.js","sourcesContent":["import \"./style.css\"\n\nexport const Container = ({ children }) => (\n  <main className=\"container\">\n    {children}\n  </main>\n);","export const Header = ({ title }) => (\n  <header>\n    <h1>{title}</h1>\n  </header>\n);","import './style.css';\n\nexport const Section = ({ title, body, extraHeaderContent }) => (\n  <section className=\"section\">\n    <header className=\"section__header\">\n      <h2 className=\"section__title\">{title}</h2>\n      {extraHeaderContent}\n    </header>\n    <div className=\"section__body\">\n      {body}\n    </div>\n  </section>  \n);","import { useState, useRef  } from 'react';\nimport './style.css';\n\nexport const Form = ({ addNewTask }) => {\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n  const textInput = useRef(null);\n\n  const handleFocus = () => {\n    textInput.current.focus();\n  };\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n    \n    const isEmptyWhiteSpaces= /^[\\s]*$/;\n\n    if(isEmptyWhiteSpaces.test(newTaskContent)) {\n      return;\n    }\n\n    addNewTask(newTaskContent.trim());\n    setNewTaskContent(\"\");\n  };\n\n  return (\n    <form \n      className=\"form\"\n      onSubmit={onFormSubmit}\n    >\n      <input  \n        ref={textInput}\n        value={newTaskContent}\n        className=\"form__input\" \n        placeholder=\"What you have to do?\" \n        autoFocus \n        onChange={ ({ target }) => setNewTaskContent(target.value)}\n      />\n      <button \n        onClick={handleFocus}\n        className=\"form__button\"\n      >\n        Add task\n      </button>\n    </form>\n  ); \n};","import './style.css';\n\nexport const Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\n  <ul className=\"tasks\">\n    {tasks.map( task => (\n      <li\n        key={task.id}\n        className=\n        {`tasks__item${ task.done && hideDone ? \" tasks__item--hidden\" : \"\"}`}\n        >\n        <button \n          className=\"tasks__button tasks__button--toggleDone\"\n          onClick={() => toggleTaskDone(task.id)}\n        >\n          {task.done ? \"âœ“\" : \"\"}\n        </button>\n          <span className=\n            {`tasks__singleTask${ task.done ? \" tasks__singleTask--done\" : \"\"}`}>\n            {task.content} \n          </span>\n        <button \n          className=\"tasks__button\"\n          onClick={() => removeTask(task.id)}\n        >\n          ðŸ—‘\n        </button>\n      </li>\n    ))}\n  </ul>\n);","import './style.css';\n\nexport const Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\n    <div className=\"buttons\">\n      {tasks.length > 0 && (\n        <>\n          <button \n            onClick={toggleHideDone}\n            className=\"buttons__button\"\n            disabled={tasks.every( ({ done }) => !done)} \n          >\n            {hideDone ? 'Show' : 'Hide'} done\n          </button>\n          <button \n            onClick={setAllDone}\n            className=\"buttons__button\" \n            disabled={tasks.every( ({ done }) => done)} \n          >\n            Mark all done\n          </button>\n        </> \n      )} \n    </div>\n);","import { useState, useEffect } from 'react';\nimport { Container } from './components/Container';\nimport { Header } from './components/Header';\nimport { Section } from './components/Section';\nimport { Form } from './components/Form';\nimport { Tasks } from './components/Tasks';\nimport { Buttons } from './components/Buttons';\n\nexport function App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = id => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = id => {\n    setTasks(tasks => tasks.map(task => {\n      if(task.id === id) {\n        return {...task, done: !task.done};\n      }\n\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task, \n      done: true,\n    })));\n  };\n\n  const addNewTask = newTaskContent => {\n    setTasks(tasks => [\n      ...tasks, \n      {\n        content: newTaskContent,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      }]);\n  };\n\n  useEffect(() => {\n    const tasks = JSON.parse(localStorage.getItem('tasks'));\n    \n    if (tasks) {\n      setTasks(tasks);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]);\n\n  return (\n    <Container> \n      <Header title=\"List of tasks\" />\n      <Section \n        title=\"Add new task\" \n        body={<Form addNewTask={addNewTask} />} \n      />\n      <Section\n        title=\"List of to do\"\n        body={\n          <Tasks \n            tasks={tasks} \n            hideDone={hideDone} \n            removeTask={removeTask} \n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons \n            tasks={tasks} \n            hideDone={hideDone} \n            toggleHideDone={toggleHideDone} \n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n};","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
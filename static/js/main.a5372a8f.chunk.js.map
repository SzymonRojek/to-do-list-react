{"version":3,"sources":["common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/TaskPage/index.js","features/tasks/TasksPage/Form/styled.js","features/tasks/Input/index.js","features/tasks/TasksPage/Form/index.js","features/tasks/TasksPage/searchQueryParamName.js","features/tasks/TasksPage/TasksList/styled.js","features/tasks/TasksPage/TasksList/index.js","features/tasks/TasksPage/Buttons/styled.js","features/tasks/TasksPage/Button/index.js","features/tasks/TasksPage/Buttons/index.js","features/tasks/TasksPage/DownloadExampleTasksButton/index.js","features/tasks/TasksPage/Search/styled.js","features/tasks/TasksPage/Search/index.js","features/tasks/TasksPage/index.js","features/author/AuthorPage.js","Navigation/styled.js","Navigation/index.js","App.js","reportWebVitals.js","GlobalStyle.js","theme.js","features/tasks/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["Container","styled","main","Header","title","Wrapper","section","theme","backgroundColor","accent","shadow","header","borderLight","breakpoint","mobile","Heading","h2","BodyWrapper","div","Section","button","body","extraHeaderContent","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","tasksSlice","createSlice","name","initialState","parse","getItem","hideDone","loading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","setAllDone","removeTask","splice","fetchExampleTasks","setTasks","setError","actions","selectTasksState","selectTasks","selectHidedone","selectAreTasksEmpty","length","selectIsEveryTaskDone","every","selectLoading","TaskPage","useParams","useSelector","find","getTaskById","content","FormWrapper","form","Button","addButton","color","hover","outline","active","input","borderDark","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","nanoid","Input","ref","value","placeholder","autoFocus","onChange","target","onClick","current","focus","List","ul","Item","li","hidden","css","doneButton","remove","removeButton","toggleDone","Content","span","TasksList","location","useLocation","query","URLSearchParams","search","get","searchQueryParamName","filter","toUpperCase","includes","selectTasksByQuery","map","to","hideAndFinishButtons","disabled","Buttons","areTasksEmpty","isEveryTaskDone","DownloadExapleTasksButton","Search","history","useHistory","searchParams","delete","set","pathname","toString","TasksPage","AuthorPage","navigation","Navigation","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","colorNames","container","ipad","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","taskSaga","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5372a8f.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.main` \n  max-width: 900px;\n  margin: 0 auto;\n  padding: 20px;\n`;","export const Header = ({ title }) => (\n  <header>\n    <h1>{title}</h1>\n  </header>\n);","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n  margin: 10px 0;\n  background-color: ${({ theme }) => theme.section.backgroundColor};\n  box-shadow: 0 0 5px ${({ theme }) => theme.accent.shadow};\n`;\n\nexport const Header = styled.header`\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-gap: 20px;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid ${({ theme }) => theme.accent.borderLight};\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport const Heading = styled.h2`\n  font-size: 20px;\n  margin: 0;\n`;\n\nexport const BodyWrapper = styled.div`\n  padding: 20px;\n`;","import { \n  Wrapper, \n  Header, \n  Heading, \n  BodyWrapper \n} from './styled';\n\nexport const Section = ({ title, button, body, extraHeaderContent }) => (\n  <Wrapper>\n    <Header>\n      <Heading>\n        {title}\n      </Heading>\n        {button}\n        {extraHeaderContent}\n    </Header>\n    <BodyWrapper>\n      {body}\n    </BodyWrapper>\n  </Wrapper>  \n);","const localStorageKey = \"tasks\";\n\nexport const saveTasksInLocalStorage = tasks => localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n\nexport const getTasksFromLocalStorage = () => JSON.parse(localStorage.getItem(localStorageKey)) || [];","import { createSlice } from '@reduxjs/toolkit';\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    tasks: getTasksFromLocalStorage(),\n    hideDone: false,\n    loading: false,\n  }, \n  reducers: {\n    addTask: ({ tasks }, { payload: task }) => {\n      tasks.push(task);\n    },\n    toggleHideDone: state => {\n      state.hideDone = !state.hideDone;\n    },\n    toggleTaskDone: ({ tasks }, { payload: taskId}) => {\n      const index = tasks.findIndex(({ id }) => id === taskId);\n      tasks[index].done = !tasks[index].done;\n    },\n    setAllDone: ({ tasks }) => {\n      for (const task of tasks) {\n        task.done = true;\n      }\n    },\n    removeTask: ({ tasks }, { payload: taskId}) => {\n      const index = tasks.findIndex(({ id }) => id === taskId);\n      tasks.splice(index, 1);\n    },\n    fetchExampleTasks: state => {\n      state.loading = true;\n    },\n    setTasks: (state, { payload: tasks }) => {\n      state.tasks = tasks;\n      state.loading = false;\n    },\n    setError: state => {\n      state.loading = false;\n    },\n  },\n});\n \nexport const { \n  addTask, \n  toggleHideDone, \n  toggleTaskDone, \n  setAllDone, \n  removeTask,\n  fetchExampleTasks,\n  setTasks,\n  setError,\n} = tasksSlice.actions;\n\nexport const selectTasksState = state => state.tasks;\n\nexport const selectTasks = state => selectTasksState(state).tasks;\nexport const selectHidedone = state => selectTasksState(state).hideDone;\nexport const selectAreTasksEmpty = state => selectTasks(state).length === 0;\nexport const selectIsEveryTaskDone = state => selectTasks(state).every(({ done }) => done);\nexport const selectLoading = state => state.tasks.loading;\n\nexport const getTaskById = (state, taskId) => selectTasks(state).find(({ id }) => id === taskId);\n\nexport const selectTasksByQuery = (state, query) => {\n  const tasks = selectTasks(state);\n\n  if (!query || query.trim() === \"\") {\n    return tasks;\n  }\n\n  return tasks.filter(({ content }) => content.toUpperCase().includes(query.trim().toUpperCase()));\n}\nexport default tasksSlice.reducer;","import { useParams } from 'react-router';\nimport { useSelector } from 'react-redux';\nimport { Container } from '../../../common/Container';\nimport { Header } from '../../../common/Header';\nimport { Section } from '../../../common/Section';\nimport { getTaskById } from '../tasksSlice';\n\nexport const TaskPage = () => {\n  const { id } = useParams();\n  const task = useSelector(state => getTaskById(state, id));\n\n  return (\n    <Container> \n      <Header title=\"Task details:\" />\n      <Section \n        title={task ? task.content : \"Task has not been found 😢\"}\n        body={\n        <><strong>Finshed:</strong> {task.done ? \"Yes\" : \"No\"}</>} \n      />\n    </Container>\n  );\n};  ","import styled from 'styled-components';\n\nexport const FormWrapper = styled.form`\n  display: grid;\n  grid-template-columns: 1fr auto;\n  grid-gap: 20px;\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px;\n  color: ${({ theme }) => theme.addButton.color};\n  border: 1px solid transparent;\n  background-color: ${({ theme }) => theme.addButton.backgroundColor};\n  cursor: pointer;\n  transition: transform .3s, background-color .3s ease-in;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.addButton.hover};\n\n    @media (min-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n      transform: scale(1.1);\n    }\n  }\n\n  &:active {\n    outline: 1px solid ${({ theme }) => theme.accent.outline};\n    background-color: ${({ theme }) => theme.addButton.active};\n  }\n`;","import styled from \"styled-components\";\n\nexport default styled.input`\n  padding: 10px;\n  border: 1px solid ${({ theme }) => theme.accent.borderLight};\n  outline: none;\n  border-radius: 3px;\n\n  &:focus {\n    border: 1px solid ${({ theme }) => theme.accent.borderDark};\n  }\n`;","import { useState, useRef  } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { FormWrapper, Button } from './styled';\nimport { addTask } from '../../tasksSlice';\nimport Input from '../../Input';\n\nexport const Form = () => {\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n  const inputRef = useRef(null);\n\n  const handleFocus = () => {\n    inputRef.current.focus();\n  };\n\n  const dispatch = useDispatch();\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n    \n    const trimmedNewTaskContent = newTaskContent.trim();\n\n      if (!trimmedNewTaskContent) {\n        return;\n      }\n\n    dispatch(addTask({\n      content: trimmedNewTaskContent,\n      done: false,\n      id: nanoid(),\n    }));\n\n    setNewTaskContent(\"\");\n  };\n\n  return (\n    <FormWrapper onSubmit={onFormSubmit}>\n      <Input \n        ref={inputRef}\n        value={newTaskContent}\n        placeholder=\"What you have to do?\" \n        autoFocus \n        onChange={({ target }) => setNewTaskContent(target.value)}\n      />\n      <Button onClick={handleFocus}>\n        Add task\n      </Button>\n    </FormWrapper>\n  ); \n};","export default \"search\";","import styled, { css } from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n  grid-gap: 10px;\n  align-items: center;\n  padding: 10px;\n  border-bottom: 1px solid ${({ theme }) => theme.accent.borderLight};\n\n  ${({ hidden }) => hidden && css`display: none;`}\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 10px 0 10px;\n  color: ${({ theme }) => theme.doneButton.color};\n  width: 30px;\n  height: 30px;\n  padding: 0;\n  border: none;\n  cursor: pointer;\n  transition: background-color .3s ease-in;\n\n  ${({ remove }) => remove && css`\n    background-color: ${({ theme }) => theme.removeButton.backgroundColor};\n\n    &:hover {\n      background-color: ${({ theme }) => theme.removeButton.hover};\n    }\n  `}\n  \n  ${({ toggleDone }) => toggleDone && css`\n    background-color: ${({ theme }) => theme.doneButton.backgroundColor};\n    \n    &:hover {\n    background-color: ${({ theme }) => theme.doneButton.hover};\n  `}\n\n  &:active {\n    outline: 1px solid ${({ theme }) => theme.accent.outline};\n  }\n`;\n\nexport const Content = styled.span`\n  word-break: break-word;\n\n  ${({ done }) => done && css`text-decoration: line-through;`}\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { Link, useLocation } from 'react-router-dom';\nimport { \n  toggleTaskDone, \n  removeTask, \n  selectHidedone, \n  selectTasksByQuery\n} from '../../tasksSlice';\nimport searchQueryParamName from '../searchQueryParamName';\nimport {\n  List,\n  Item,\n  Button,\n  Content\n} from './styled';\n \n\nexport const TasksList = () => {\n  const location = useLocation();\n  const query = new URLSearchParams(location.search).get(searchQueryParamName);\n\n  const tasks = useSelector(state => selectTasksByQuery(state, query));\n  const hideDone = useSelector(selectHidedone);\n\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {tasks.map(task => (\n        <Item\n          key={task.id}\n          hidden={task.done && hideDone}\n        > \n        <Button \n          toggleDone \n          onClick={() => dispatch(toggleTaskDone(task.id))}\n        >\n          {task.done ? \"✓\" : \"\"}\n        </Button>\n        <Content done={task.done}>\n          <Link to={`/zadania/${task.id}`}>{task.content}</Link>\n        </Content>\n        <Button\n          remove  \n          onClick={() => dispatch(removeTask(task.id))}\n        >\n          🗑\n        </Button >\n        </Item>\n      ))}\n    </List>\n  );\n}; ","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  margin: 0 20px 0 0;\n  color: ${({ theme }) => theme.hideAndFinishButtons.color};\n  border: none;\n  background-color: transparent;\n  outline: none;\n  cursor: pointer;\n  transition: color .2s ease-in;\n\n  &:hover {\n    color: ${({ theme }) => theme.hideAndFinishButtons.hover};\n  }\n\n  &:active {\n    color: ${({ theme }) => theme.hideAndFinishButtons.active};\n  }\n\n  &:disabled {\n    color: ${({ theme }) => theme.hideAndFinishButtons.disabled};\n    cursor: not-allowed;\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    flex-basis: 100%;\n    margin: 10px;\n  }\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { Wrapper } from './styled';\nimport { Button } from '../Button';\n\nimport { \n  toggleHideDone, \n  setAllDone, \n  selectAreTasksEmpty, \n  selectIsEveryTaskDone, \n  selectHidedone \n} from '../../tasksSlice';\n\nexport const Buttons = () => {\n  const areTasksEmpty = useSelector(selectAreTasksEmpty);\n  const isEveryTaskDone = useSelector(selectIsEveryTaskDone);\n  const hideDone = useSelector(selectHidedone);\n\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper>\n      {!areTasksEmpty && (\n        <>\n          <Button \n            onClick={() => dispatch(toggleHideDone())}\n            disabled={isEveryTaskDone} \n          >\n            {hideDone ? 'Show' : 'Hide'} done\n          </Button>\n          <Button \n            onClick={() => dispatch(setAllDone())} \n            disabled={isEveryTaskDone} \n          >\n            Finish all\n          </Button>\n        </> \n      )} \n    </Wrapper>\n  );\n};","import { useDispatch, useSelector } from 'react-redux';\nimport { fetchExampleTasks, selectLoading } from '../../tasksSlice';\nimport { Button } from '../Button';\n\nexport const DownloadExapleTasksButton = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(selectLoading);\n\n  return (\n    <Button \n      disabled={loading} \n      onClick={() => dispatch(fetchExampleTasks())}\n    >\n      {loading ? \"Loading...\" : \"Download tasks examples\"}\n    </Button>)\n}; ","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr\n`;","import { useHistory, useLocation } from 'react-router-dom';\nimport Input from '../../Input';\nimport searchQueryParamName from '../searchQueryParamName';\nimport { Wrapper } from './styled';\n\nexport const Search = () => {\n  const location = useLocation();\n  const history = useHistory();\n  const query = (new URLSearchParams(location.search)).get(searchQueryParamName);\n\n  const onInputChange = ({ target }) => {\n    const searchParams = new URLSearchParams(location.search);\n\n    if (target.value.trim() === \"\") {\n      searchParams.delete(searchQueryParamName);\n    } else {\n      searchParams.set(searchQueryParamName, target.value);\n    }\n\n    history.push(`${location.pathname}?${searchParams.toString()}`);\n  };\n\n  return (\n    <Wrapper>\n      <Input\n        placeholder=\"Filter tasks\"\n        value={query || \"\"}\n        onChange={onInputChange}\n      />\n    </Wrapper>\n  );\n};","import { Container } from '../../../common/Container';\nimport { Header } from '../../../common/Header';\nimport { Section } from '../../../common/Section';\nimport { Form } from '../../../features/tasks/TasksPage/Form';\nimport { TasksList } from './TasksList';\nimport { Buttons } from './Buttons';\nimport { DownloadExapleTasksButton } from './DownloadExampleTasksButton';\nimport { Search } from './Search';\n\nexport const TasksPage = () => (\n  <Container> \n    <Header title=\"List of tasks\" />\n    <Section \n      button={<DownloadExapleTasksButton />}\n      title=\"Add new task\" \n      body={<Form />} \n    />\n    <Section\n      title=\"Search tasks\"\n      body={<Search />}\n    />\n    <Section\n      title=\"List of to do\"\n      body={<TasksList />}\n      extraHeaderContent={<Buttons />}\n    />\n</Container>\n);","import { Container } from '../../common/Container';\nimport { Header } from '../../common/Header';\nimport { Section } from '../../common/Section';\n\nexport const AuthorPage = () => (\n  <Container> \n    <Header title=\"About me\" />\n    <Section \n      title=\"Szymon Rojek\" \n      body={\n        <>\n          <p>I learn programming and I <strong>really</strong> love it!</p>\n          <p>Hopefully I will become a front-end developer</p>\n          <p>If you want to get to know my skills, please have a check my github profile.</p>\n        </>\n      }\n    />\n  </Container>\n);\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 0;\n  display: flex;\n  justify-content: center;\n  list-style: none;\n  padding: 20px;\n\n  background-color: ${({ theme }) => theme.navigation.backgroundColor};\n`;\n\nexport const Item = styled.li``;","import { Link } from 'react-router-dom';\nimport { List, Item } from './styled';\n \nexport const Navigation = () => (\n  <nav>\n    <List>\n      <Item>\n        <Link to=\"/zadania\">Zadania</Link>\n      </Item>\n      <Item>\n        <Link to=\"/author\">Author</Link>\n      </Item>\n    </List>\n  </nav>\n);","import { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { TaskPage } from './features/tasks/TaskPage';\nimport { TasksPage } from './features/tasks/TasksPage/index';\nimport { AuthorPage } from './features/author/AuthorPage';\nimport { Navigation } from './Navigation';\n\nexport const App = () => (\n  <HashRouter>\n    <Navigation />\n\n    <Switch>\n      <Route path=\"/zadania/:id\">\n        <TaskPage />\n      </Route>\n      <Route path=\"/zadania\">\n        <TasksPage />\n      </Route>\n      <Route path=\"/author\">\n        <AuthorPage />\n      </Route>\n      <Route path=\"/\">\n        <Redirect to=\"/zadania\" />\n      </Route>\n    </Switch>\n  </HashRouter>\n);\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n\n  html {\n    box-sizing: border-box;\n    scroll-behavior: smooth;\n  }\n\n  *, ::after, ::before {\n     box-sizing: inherit;\n  }\n\n  body {\n    font-family: 'Montserrat', sans-serif;\n    background-color: ${({ theme }) => theme.body.backgroundColor};\n  }\n`;","const colorNames = {\n  white: \"#FFF\",\n  gallery: \"#EEE\",\n  alto: \"#DDD\",\n  silver: \"#C9C2C2\",\n  crimson: \"#DB1414\",\n  cinnabar: \"#EE4444\",\n  teal: \"#008080\",\n  persianGreen: \"#009999\",\n  robinEggBlue: \"#00CCCC\",\n  bondiBlue: \"#00B3B3\",\n  forestGreen: \"#1C8622\",\n  japaneseLaurel: \"#05Af05\",\n  sherpaBlue: \"#004D4D\",\n  mineShaft: \"#222\",\n};\n\nexport const theme = {\n  body: {\n    backgroundColor: colorNames.gallery,\n  },\n  container: {\n    backgroundColor: colorNames.white,\n  },\n  section: {\n    backgroundColor: colorNames.white,\n  },\n  navigation: {\n    backgroundColor: colorNames.teal,\n  },\n  addButton: {\n    color: colorNames.white,\n    backgroundColor: colorNames.teal,\n    hover: colorNames.persianGreen,\n    active: colorNames.bondiBlue,\n  },\n  hideAndFinishButtons: {\n    color: colorNames.teal,\n    hover: colorNames.robinEggBlue,\n    active: colorNames.sherpaBlue,\n    disabled: colorNames.silver,\n  },\n  doneButton: {\n    color: colorNames.white,\n    backgroundColor: colorNames.forestGreen,\n    hover: colorNames.japaneseLaurel,\n  },\n  removeButton: {\n    backgroundColor: colorNames.crimson,\n    hover: colorNames.cinnabar,\n  },\n  accent: {\n    shadow: colorNames.alto,\n    outline: colorNames.mineShaft,\n    borderLight: colorNames.alto,\n    borderDark: colorNames.mineShaft,\n  },\n  breakpoint: {\n    mobile: 767,\n    ipad: 768,\n  },\n};","export const getExampleTasks = async () => {\n  const response = await fetch(\"/to-do-list-react/exampleTasks.json\");\n\n  if (!response.ok) {\n    new Error(response.statusText);\n  }\n\n  return await response.json();\n};","import { takeEvery, takeLatest, call, put, select, delay } from 'redux-saga/effects';\nimport { getExampleTasks } from './getExampleTasks';\nimport { fetchExampleTasks, selectTasks, setTasks, setError } from './tasksSlice';\nimport { saveTasksInLocalStorage } from './tasksLocalStorage';\n\n\nfunction* fetchExampleTasksHandler() {\n  try {\n    yield delay(1_000);\n    const exampleTasks = yield call(getExampleTasks);\n    yield put(setTasks(exampleTasks));\n  } catch (error) { \n    yield put(setError());\n    yield call(alert, \"Something wrong!\");\n  }\n};\n\nfunction* saveTasksInLocalStorageHandler() {\n  const tasks = yield select(selectTasks);\n  yield call(saveTasksInLocalStorage, tasks);  \n};\n \nexport function* taskSaga() {\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\n}; ","import { all } from 'redux-saga/effects';\nimport { taskSaga } from './features/tasks/tasksSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    taskSaga(),\n  ]);\n};","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport tasksReducer from './features/tasks/tasksSlice';\nimport rootSaga from './rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    tasks: tasksReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Normalize } from 'styled-normalize';\nimport { GlobalStyle } from './GlobalStyle';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { theme } from './theme';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}
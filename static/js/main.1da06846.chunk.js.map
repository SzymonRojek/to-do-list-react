{"version":3,"sources":["common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/Form/styled.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","features/tasks/Buttons/styled.js","features/tasks/Buttons/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","GlobalStyle.js","theme.js","store.js","index.js"],"names":["Container","styled","main","Header","title","Wrapper","section","theme","backgroundColor","accent","shadow","header","borderLight","breakpoint","mobile","Heading","h2","BodyWrapper","div","Section","body","extraHeaderContent","FormWrapper","form","Input","input","borderDark","Button","button","addButton","color","hover","outline","active","tasksSlice","createSlice","name","initialState","tasks","hideDone","reducers","addTask","payload","push","toggleHideDone","state","toggleTaskDone","index","findIndex","id","done","setAllDone","removeTask","splice","actions","selectTasks","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","ref","value","placeholder","autoFocus","onChange","target","onClick","current","focus","List","ul","Item","li","hidden","css","doneButton","remove","removeButton","toggleDone","Content","span","TasksList","useSelector","map","task","hideAndFinishButtons","disabled","Buttons","length","every","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","colorNames","container","ipad","configureStore","reducer","tasksReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.1da06846.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.main` \n  max-width: 900px;\n  margin: 0 auto;\n  padding: 20px;\n`;","export const Header = ({ title }) => (\n  <header>\n    <h1>{title}</h1>\n  </header>\n);","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n  margin: 10px 0;\n  background-color: ${({ theme }) => theme.section.backgroundColor};\n  box-shadow: 0 0 5px ${({ theme }) => theme.accent.shadow};\n`;\n\nexport const Header = styled.header`\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-gap: 20px;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid ${({ theme }) => theme.accent.borderLight};\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport const Heading = styled.h2`\n  font-size: 20px;\n  margin: 0;\n`;\n\nexport const BodyWrapper = styled.div`\n  padding: 20px;\n`;","import { \n  Wrapper, \n  Header, \n  Heading, \n  BodyWrapper \n} from './styled';\n\nexport const Section = ({ title, body, extraHeaderContent }) => (\n  <Wrapper>\n    <Header>\n      <Heading>{title}</Heading>\n      {extraHeaderContent}\n    </Header>\n    <BodyWrapper>\n      {body}\n    </BodyWrapper>\n  </Wrapper>  \n);","import styled from 'styled-components';\n\nexport const FormWrapper = styled.form`\n  display: grid;\n  grid-template-columns: 1fr auto;\n  grid-gap: 20px;\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport const Input = styled.input`\n  padding: 10px;\n  border: 1px solid ${({ theme }) => theme.accent.borderLight};\n  outline: none;\n  border-radius: 3px;\n\n  &:focus {\n    border: 1px solid ${({ theme }) => theme.accent.borderDark};\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px;\n  color: ${({ theme }) => theme.addButton.color};\n  border: 1px solid transparent;\n  background-color: ${({ theme }) => theme.addButton.backgroundColor};\n  cursor: pointer;\n  transition: transform .3s, background-color .3s ease-in;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.addButton.hover};\n\n    @media (min-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n      transform: scale(1.1);\n    }\n  }\n\n  &:active {\n    outline: 1px solid ${({ theme }) => theme.accent.outline};\n    background-color: ${({ theme }) => theme.addButton.active};\n  }\n`;","import { createSlice } from '@reduxjs/toolkit';\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    tasks: [],\n    hideDone: false,\n  }, \n  reducers: {\n    addTask: ({ tasks }, { payload }) => {\n      tasks.push(payload);\n    },\n    toggleHideDone: state => {\n      state.hideDone = !state.hideDone;\n    },\n    toggleTaskDone: ({ tasks }, { payload }) => {\n      const index = tasks.findIndex(({ id }) => id === payload);\n      tasks[index].done = !tasks[index].done;\n    },\n    setAllDone: ({ tasks }) => {\n      for (const task of tasks) {\n        task.done = true;\n      }\n    },\n    removeTask: ({ tasks }, { payload }) => {\n      const index = tasks.findIndex(({ id }) => id === payload);\n      tasks.splice(index, 1);\n    },\n  },\n});\n\nexport const { \n  addTask, \n  toggleHideDone, \n  toggleTaskDone, \n  setAllDone, \n  removeTask,\n} = tasksSlice.actions;\nexport const selectTasks = state => state.tasks;\nexport default tasksSlice.reducer;","import { useState, useRef  } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { FormWrapper, Input, Button } from './styled';\nimport { addTask } from '../tasksSlice';\n\nexport const Form = () => {\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n  const inputRef = useRef(null);\n\n  const handleFocus = () => {\n    inputRef.current.focus();\n  };\n\n  const dispatch = useDispatch();\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n    \n    const trimmedNewTaskContent = newTaskContent.trim();\n\n      if (!trimmedNewTaskContent) {\n        return;\n      }\n\n    dispatch(addTask({\n      content: trimmedNewTaskContent,\n      done: false,\n      id: nanoid(),\n    }));\n\n    setNewTaskContent(\"\");\n  };\n\n  return (\n    <FormWrapper onSubmit={onFormSubmit}>\n      <Input \n        ref={inputRef}\n        value={newTaskContent}\n        placeholder=\"What you have to do?\" \n        autoFocus \n        onChange={({ target }) => setNewTaskContent(target.value)}\n      />\n      <Button onClick={handleFocus}>\n        Add task\n      </Button>\n    </FormWrapper>\n  ); \n};","import styled, { css } from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n  grid-gap: 10px;\n  align-items: center;\n  padding: 10px;\n  border-bottom: 1px solid ${({ theme }) => theme.accent.borderLight};\n\n  ${({ hidden }) => hidden && css`display: none;`}\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 10px 0 10px;\n  color: ${({ theme }) => theme.doneButton.color};\n  width: 30px;\n  height: 30px;\n  padding: 0;\n  border: none;\n  cursor: pointer;\n  transition: background-color .3s ease-in;\n\n  ${({ remove }) => remove && css`\n    background-color: ${({ theme }) => theme.removeButton.backgroundColor};\n\n    &:hover {\n      background-color: ${({ theme }) => theme.removeButton.hover};\n    }\n  `}\n  \n  ${({ toggleDone }) => toggleDone && css`\n    background-color: ${({ theme }) => theme.doneButton.backgroundColor};\n    \n    &:hover {\n    background-color: ${({ theme }) => theme.doneButton.hover};\n  `}\n\n  &:active {\n    outline: 1px solid ${({ theme }) => theme.accent.outline};\n  }\n`;\n\nexport const Content = styled.span`\n  word-break: break-word;\n\n  ${({ done }) => done && css`text-decoration: line-through;`}\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { selectTasks, toggleTaskDone, removeTask } from '../tasksSlice';\nimport {\n  List,\n  Item,\n  Button,\n  Content\n} from './styled';\n\nexport const TasksList = () => {\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {tasks.map(task => (\n        <Item\n          key={task.id}\n          hidden={task.done && hideDone}\n        >\n        <Button \n          toggleDone \n          onClick={() => dispatch(toggleTaskDone(task.id))}\n        >\n          {task.done ? \"✓\" : \"\"}\n        </Button>\n        <Content done={task.done}>{task.content}</Content>\n        <Button\n          remove  \n          onClick={() => dispatch(removeTask(task.id))}\n        >\n          🗑\n        </Button >\n        </Item>\n      ))}\n    </List>\n  );\n}; ","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const Button = styled.button`\n  margin: 0 20px 0 0;\n  color: ${({ theme }) => theme.hideAndFinishButtons.color};\n  border: none;\n  background-color: transparent;\n  outline: none;\n  cursor: pointer;\n  transition: color .2s ease-in;\n\n  &:hover {\n    color: ${({ theme }) => theme.hideAndFinishButtons.hover};\n  }\n\n  &:active {\n    color: ${({ theme }) => theme.hideAndFinishButtons.active};\n  }\n\n  &:disabled {\n    color: ${({ theme }) => theme.hideAndFinishButtons.disabled};\n    cursor: not-allowed;\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    flex-basis: 100%;\n    margin: 10px;\n  }\n`;","import { Wrapper, Button } from './styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectTasks, toggleHideDone, setAllDone } from '../tasksSlice';\n\nexport const Buttons = () => {\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper>\n      {tasks.length > 0 && (\n        <>\n          <Button \n            onClick={() => dispatch(toggleHideDone())}\n            disabled={tasks.every(({ done }) => !done)} \n          >\n            {hideDone ? 'Show' : 'Hide'} done\n          </Button>\n          <Button \n            onClick={() => dispatch(setAllDone())} \n            disabled={tasks.every(({ done }) => done)} \n          >\n            Finish all\n          </Button>\n        </> \n      )} \n    </Wrapper>\n  );\n};","\nimport { Container } from '../../common/Container';\nimport { Header } from '../../common/Header';\nimport { Section } from '../../common/Section';\nimport { Form } from './Form';\nimport { TasksList } from './TasksList';\nimport { Buttons } from './Buttons';\n\nexport const Tasks = () => (\n  <Container> \n    <Header title=\"List of tasks\" />\n    <Section \n      title=\"Add new task\" \n      body={<Form />} \n    />\n    <Section\n      title=\"List of to do\"\n      body={<TasksList />}\n      extraHeaderContent={<Buttons />}\n    />\n  </Container>\n);\n","import { Tasks } from './features/tasks/Tasks';\n\nexport const App = () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n\n  html {\n    box-sizing: border-box;\n    scroll-behavior: smooth;\n  }\n\n  *, ::after, ::before {\n    box-sizing: inherit;\n  }\n\n  body {\n    font-family: 'Montserrat', sans-serif;\n    background-color: ${({ theme }) => theme.body.backgroundColor};\n  }\n`;","const colorNames = {\n  white: \"#FFF\",\n  gallery: \"#EEE\",\n  alto: \"#DDD\",\n  silver: \"#C9C2C2\",\n  crimson: \"#DB1414\",\n  cinnabar: \"#EE4444\",\n  teal: \"#008080\",\n  persianGreen: \"#009999\",\n  robinEggBlue: \"#00CCCC\",\n  bondiBlue: \"#00B3B3\",\n  forestGreen: \"#1C8622\",\n  japaneseLaurel: \"#05Af05\",\n  sherpaBlue: \"#004D4D\",\n  mineShaft: \"#222\",\n};\n\nexport const theme = {\n  body: {\n    backgroundColor: colorNames.gallery,\n  },\n  container: {\n    backgroundColor: colorNames.white,\n  },\n  section: {\n    backgroundColor: colorNames.white,\n  },\n  addButton: {\n    color: colorNames.white,\n    backgroundColor: colorNames.teal,\n    hover: colorNames.persianGreen,\n    active: colorNames.bondiBlue,\n  },\n  hideAndFinishButtons: {\n    color: colorNames.teal,\n    hover: colorNames.robinEggBlue,\n    active: colorNames.sherpaBlue,\n    disabled: colorNames.silver,\n  },\n  doneButton: {\n    color: colorNames.white,\n    backgroundColor: colorNames.forestGreen,\n    hover: colorNames.japaneseLaurel,\n  },\n  removeButton: {\n    backgroundColor: colorNames.crimson,\n    hover: colorNames.cinnabar,\n  },\n  accent: {\n    shadow: colorNames.alto,\n    outline: colorNames.mineShaft,\n    borderLight: colorNames.alto,\n    borderDark: colorNames.mineShaft,\n  },\n  breakpoint: {\n    mobile: 767,\n    ipad: 768,\n  },\n};","import { configureStore } from '@reduxjs/toolkit';\nimport tasksReducer from './features/tasks/tasksSlice';\n\nexport default configureStore ({\n  reducer: {\n    tasks: tasksReducer,\n  },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Normalize } from 'styled-normalize';\nimport { GlobalStyle } from './GlobalStyle';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { theme } from './theme';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}
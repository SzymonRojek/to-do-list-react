{"version":3,"sources":["common/Container/index.js","common/Header/index.js","common/Section/styled.js","common/Section/index.js","features/tasks/Form/styled.js","features/tasks/tasksLocalStorage.js","features/tasks/tasksSlice.js","features/tasks/Form/index.js","features/tasks/TasksList/styled.js","features/tasks/TasksList/index.js","common/Buttons/styled.js","common/Buttons/index.js","common/Section/DownloadButton/index.js","features/tasks/Tasks.js","App.js","reportWebVitals.js","GlobalStyle.js","theme.js","features/getExampleTasks.js","features/tasks/tasksSaga.js","rootSaga.js","store.js","index.js"],"names":["Container","styled","main","Header","title","Wrapper","section","theme","backgroundColor","accent","shadow","header","borderLight","breakpoint","mobile","Heading","h2","BodyWrapper","div","Section","button","body","extraHeaderContent","FormWrapper","form","Input","input","borderDark","Button","addButton","color","hover","outline","active","localStorageKey","saveTasksInLocalStorage","tasks","localStorage","setItem","JSON","stringify","console","log","parse","getItem","tasksSlice","createSlice","name","initialState","hideDone","loading","reducers","addTask","task","payload","push","toggleHideDone","state","toggleTaskDone","taskId","index","findIndex","id","done","setAllDone","removeTask","splice","fetchExampleTasks","setTasks","setError","actions","selectTasks","selectLoading","Form","useState","newTaskContent","setNewTaskContent","inputRef","useRef","dispatch","useDispatch","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","content","nanoid","ref","value","placeholder","autoFocus","onChange","target","onClick","current","focus","List","ul","Item","li","hidden","css","doneButton","remove","removeButton","toggleDone","Content","span","TasksList","useSelector","map","hideAndFinishButtons","disabled","Buttons","length","every","DownloadButton","Tasks","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","colorNames","container","ipad","getExampleTasks","a","fetch","response","ok","Error","statusText","json","fetchExampleTasksHandler","saveTasksInLocalStorageHandler","watchFetchExampleTasks","delay","call","exampleTasks","put","alert","select","takeLatest","type","takeEvery","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","tasksReducer","middleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0179f079.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.main` \n  max-width: 900px;\n  margin: 0 auto;\n  padding: 20px;\n`;","export const Header = ({ title }) => (\n  <header>\n    <h1>{title}</h1>\n  </header>\n);","import styled from 'styled-components';\n\nexport const Wrapper = styled.section`\n  margin: 10px 0;\n  background-color: ${({ theme }) => theme.section.backgroundColor};\n  box-shadow: 0 0 5px ${({ theme }) => theme.accent.shadow};\n`;\n\nexport const Header = styled.header`\n  display: grid;\n  grid-template-columns: auto auto;\n  grid-gap: 20px;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid ${({ theme }) => theme.accent.borderLight};\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport const Heading = styled.h2`\n  font-size: 20px;\n  margin: 0;\n`;\n\nexport const BodyWrapper = styled.div`\n  padding: 20px;\n`;","import { \n  Wrapper, \n  Header, \n  Heading, \n  BodyWrapper \n} from './styled';\n\nexport const Section = ({ title, button, body, extraHeaderContent }) => (\n  <Wrapper>\n    <Header>\n      <Heading>\n        {title}\n      </Heading>\n        {button}\n        {extraHeaderContent}\n    </Header>\n    <BodyWrapper>\n      {body}\n    </BodyWrapper>\n  </Wrapper>  \n);","import styled from 'styled-components';\n\nexport const FormWrapper = styled.form`\n  display: grid;\n  grid-template-columns: 1fr auto;\n  grid-gap: 20px;\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    grid-template-columns: 1fr;\n  }\n`;\n\nexport const Input = styled.input`\n  padding: 10px;\n  border: 1px solid ${({ theme }) => theme.accent.borderLight};\n  outline: none;\n  border-radius: 3px;\n\n  &:focus {\n    border: 1px solid ${({ theme }) => theme.accent.borderDark};\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 10px;\n  color: ${({ theme }) => theme.addButton.color};\n  border: 1px solid transparent;\n  background-color: ${({ theme }) => theme.addButton.backgroundColor};\n  cursor: pointer;\n  transition: transform .3s, background-color .3s ease-in;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.addButton.hover};\n\n    @media (min-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n      transform: scale(1.1);\n    }\n  }\n\n  &:active {\n    outline: 1px solid ${({ theme }) => theme.accent.outline};\n    background-color: ${({ theme }) => theme.addButton.active};\n  }\n`;","const localStorageKey = \"tasks\";\n\nexport const saveTasksInLocalStorage = tasks => localStorage.setItem(localStorageKey, JSON.stringify(tasks));\n\nexport const getTasksFromLocalStorage = () => JSON.parse(localStorage.getItem(localStorageKey)) || [];\n\nconsole.log(getTasksFromLocalStorage());","import { createSlice } from '@reduxjs/toolkit';\nimport { getTasksFromLocalStorage } from './tasksLocalStorage';\n\nconst tasksSlice = createSlice({\n  name: \"tasks\",\n  initialState: {\n    tasks: [],\n    hideDone: false,\n    loading: false,\n  }, \n  reducers: {\n    addTask: ({ tasks }, { payload: task }) => {\n      tasks.push(task);\n    },\n    toggleHideDone: state => {\n      state.hideDone = !state.hideDone;\n    },\n    toggleTaskDone: ({ tasks }, { payload: taskId}) => {\n      const index = tasks.findIndex(({ id }) => id === taskId);\n      tasks[index].done = !tasks[index].done;\n    },\n    setAllDone: ({ tasks }) => {\n      for (const task of tasks) {\n        task.done = true;\n      }\n    },\n    removeTask: ({ tasks }, { payload: taskId}) => {\n      const index = tasks.findIndex(({ id }) => id === taskId);\n      tasks.splice(index, 1);\n    },\n    fetchExampleTasks: state => {\n      state.loading = true;\n    },\n    setTasks: (state, { payload: tasks }) => {\n      state.tasks = tasks;\n      state.loading = false;\n      console.log(state.loading);\n    },\n    setError: state => {\n      state.loading = false;\n    },\n  },\n});\n \nexport const { \n  addTask, \n  toggleHideDone, \n  toggleTaskDone, \n  setAllDone, \n  removeTask,\n  fetchExampleTasks,\n  setTasks,\n  setError,\n} = tasksSlice.actions;\n\nexport const selectTasks = state => state.tasks;\nexport const selectLoading = state => state.loading;\n\nexport default tasksSlice.reducer;","import { useState, useRef  } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { FormWrapper, Input, Button } from './styled';\nimport { addTask } from '../tasksSlice';\n\nexport const Form = () => {\n  const [newTaskContent, setNewTaskContent] = useState(\"\");\n\n  const inputRef = useRef(null);\n\n  const handleFocus = () => {\n    inputRef.current.focus();\n  };\n\n  const dispatch = useDispatch();\n\n  const onFormSubmit = event => {\n    event.preventDefault();\n    \n    const trimmedNewTaskContent = newTaskContent.trim();\n\n      if (!trimmedNewTaskContent) {\n        return;\n      }\n\n    dispatch(addTask({\n      content: trimmedNewTaskContent,\n      done: false,\n      id: nanoid(),\n    }));\n\n    setNewTaskContent(\"\");\n  };\n\n  return (\n    <FormWrapper onSubmit={onFormSubmit}>\n      <Input \n        ref={inputRef}\n        value={newTaskContent}\n        placeholder=\"What you have to do?\" \n        autoFocus \n        onChange={({ target }) => setNewTaskContent(target.value)}\n      />\n      <Button onClick={handleFocus}>\n        Add task\n      </Button>\n    </FormWrapper>\n  ); \n};","import styled, { css } from 'styled-components';\n\nexport const List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  display: grid;\n  grid-template-columns: auto 1fr auto;\n  grid-gap: 10px;\n  align-items: center;\n  padding: 10px;\n  border-bottom: 1px solid ${({ theme }) => theme.accent.borderLight};\n\n  ${({ hidden }) => hidden && css`display: none;`}\n`;\n\nexport const Button = styled.button`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 0 10px 0 10px;\n  color: ${({ theme }) => theme.doneButton.color};\n  width: 30px;\n  height: 30px;\n  padding: 0;\n  border: none;\n  cursor: pointer;\n  transition: background-color .3s ease-in;\n\n  ${({ remove }) => remove && css`\n    background-color: ${({ theme }) => theme.removeButton.backgroundColor};\n\n    &:hover {\n      background-color: ${({ theme }) => theme.removeButton.hover};\n    }\n  `}\n  \n  ${({ toggleDone }) => toggleDone && css`\n    background-color: ${({ theme }) => theme.doneButton.backgroundColor};\n    \n    &:hover {\n    background-color: ${({ theme }) => theme.doneButton.hover};\n  `}\n\n  &:active {\n    outline: 1px solid ${({ theme }) => theme.accent.outline};\n  }\n`;\n\nexport const Content = styled.span`\n  word-break: break-word;\n\n  ${({ done }) => done && css`text-decoration: line-through;`}\n`;","import { useSelector, useDispatch } from 'react-redux';\nimport { selectTasks, toggleTaskDone, removeTask } from '../tasksSlice';\nimport {\n  List,\n  Item,\n  Button,\n  Content\n} from './styled';\n\nexport const TasksList = () => {\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  return (\n    <List>\n      {tasks.map(task => (\n        <Item\n          key={task.id}\n          hidden={task.done && hideDone}\n        >\n        <Button \n          toggleDone \n          onClick={() => dispatch(toggleTaskDone(task.id))}\n        >\n          {task.done ? \"✓\" : \"\"}\n        </Button>\n        <Content done={task.done}>{task.content}</Content>\n        <Button\n          remove  \n          onClick={() => dispatch(removeTask(task.id))}\n        >\n          🗑\n        </Button >\n        </Item>\n      ))}\n    </List>\n  );\n}; ","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const Button = styled.button`\n  margin: 0 20px 0 0;\n  color: ${({ theme }) => theme.hideAndFinishButtons.color};\n  border: none;\n  background-color: transparent;\n  outline: none;\n  cursor: pointer;\n  transition: color .2s ease-in;\n\n  &:hover {\n    color: ${({ theme }) => theme.hideAndFinishButtons.hover};\n  }\n\n  &:active {\n    color: ${({ theme }) => theme.hideAndFinishButtons.active};\n  }\n\n  &:disabled {\n    color: ${({ theme }) => theme.hideAndFinishButtons.disabled};\n    cursor: not-allowed;\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.mobile}px) {\n    flex-basis: 100%;\n    margin: 10px;\n  }\n`;","import { Wrapper, Button } from './styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectTasks, toggleHideDone, setAllDone } from '../../features/tasks/tasksSlice';\n\nexport const Buttons = () => {\n  const { tasks, hideDone } = useSelector(selectTasks);\n  const dispatch = useDispatch();\n\n  return (\n    <Wrapper>\n      {tasks.length > 0 && (\n        <>\n          <Button \n            onClick={() => dispatch(toggleHideDone())}\n            disabled={tasks.every(({ done }) => !done)} \n          >\n            {hideDone ? 'Show' : 'Hide'} done\n          </Button>\n          <Button \n            onClick={() => dispatch(setAllDone())} \n            disabled={tasks.every(({ done }) => done)} \n          >\n            Finish all\n          </Button>\n        </> \n      )} \n    </Wrapper>\n  );\n};","import { useDispatch, useSelector } from 'react-redux';\nimport { fetchExampleTasks, selectLoading } from '../../../features/tasks/tasksSlice';\nimport { Button } from '../../Buttons/styled';\n\nexport const DownloadButton = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(selectLoading);\n\n  return (\n    <Button \n      disabled={loading} \n      onClick={() => dispatch(fetchExampleTasks())}\n    >\n      {loading ? \"Loading...\" : \"Download tasks examples\"}\n    </Button>)\n}; ","import { Container } from '../../common/Container';\nimport { Header } from '../../common/Header';\nimport { Section } from '../../common/Section';\nimport { Form } from './Form';\nimport { TasksList } from './TasksList';\nimport { Buttons } from '../../common/Buttons';\nimport { DownloadButton } from '../../common/Section/DownloadButton';\n\nexport const Tasks = () => (\n  <Container> \n    <Header title=\"List of tasks\" />\n    <Section \n      button={<DownloadButton />}\n      title=\"Add new task\" \n      body={<Form />} \n    />\n    <Section\n      title=\"List of to do\"\n      body={<TasksList />}\n      extraHeaderContent={<Buttons />}\n    />\n  </Container>\n); ","import { Tasks } from './features/tasks/Tasks';\n\nexport const App = () => <Tasks />;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n\n  html {\n    box-sizing: border-box;\n    scroll-behavior: smooth;\n  }\n\n  *, ::after, ::before {\n     box-sizing: inherit;\n  }\n\n  body {\n    font-family: 'Montserrat', sans-serif;\n    background-color: ${({ theme }) => theme.body.backgroundColor};\n  }\n`;","const colorNames = {\n  white: \"#FFF\",\n  gallery: \"#EEE\",\n  alto: \"#DDD\",\n  silver: \"#C9C2C2\",\n  crimson: \"#DB1414\",\n  cinnabar: \"#EE4444\",\n  teal: \"#008080\",\n  persianGreen: \"#009999\",\n  robinEggBlue: \"#00CCCC\",\n  bondiBlue: \"#00B3B3\",\n  forestGreen: \"#1C8622\",\n  japaneseLaurel: \"#05Af05\",\n  sherpaBlue: \"#004D4D\",\n  mineShaft: \"#222\",\n};\n\nexport const theme = {\n  body: {\n    backgroundColor: colorNames.gallery,\n  },\n  container: {\n    backgroundColor: colorNames.white,\n  },\n  section: {\n    backgroundColor: colorNames.white,\n  },\n  addButton: {\n    color: colorNames.white,\n    backgroundColor: colorNames.teal,\n    hover: colorNames.persianGreen,\n    active: colorNames.bondiBlue,\n  },\n  hideAndFinishButtons: {\n    color: colorNames.teal,\n    hover: colorNames.robinEggBlue,\n    active: colorNames.sherpaBlue,\n    disabled: colorNames.silver,\n  },\n  doneButton: {\n    color: colorNames.white,\n    backgroundColor: colorNames.forestGreen,\n    hover: colorNames.japaneseLaurel,\n  },\n  removeButton: {\n    backgroundColor: colorNames.crimson,\n    hover: colorNames.cinnabar,\n  },\n  accent: {\n    shadow: colorNames.alto,\n    outline: colorNames.mineShaft,\n    borderLight: colorNames.alto,\n    borderDark: colorNames.mineShaft,\n  },\n  breakpoint: {\n    mobile: 767,\n    ipad: 768,\n  },\n};","export const getExampleTasks = async () => {\n  const response = await fetch(\"/to-do-list-react/exampleTasks.json\");\n\n  if (!response.ok) {\n    new Error(response.statusText);\n  }\n\n  return await response.json();\n};","import { takeEvery, takeLatest, call, put, select, delay } from 'redux-saga/effects';\nimport { getExampleTasks } from '../getExampleTasks';\nimport { fetchExampleTasks, selectTasks, setTasks, setError } from './tasksSlice';\nimport { saveTasksInLocalStorage } from './tasksLocalStorage';\n\n\nfunction* fetchExampleTasksHandler() {\n  try {\n    yield delay(1_000);\n    const exampleTasks = yield call(getExampleTasks);\n    yield put(setTasks(exampleTasks));\n  } catch (error) { \n    yield put(setError());\n    yield call(alert, \"Something wrong!\");\n  }\n};\n\nfunction* saveTasksInLocalStorageHandler() {\n  const tasks = yield select(selectTasks);\n  yield call(saveTasksInLocalStorage, tasks);  \n};\n \nexport function* watchFetchExampleTasks() {\n  yield takeLatest(fetchExampleTasks.type, fetchExampleTasksHandler);\n  yield takeEvery(\"*\", saveTasksInLocalStorageHandler);\n}; ","import { all } from 'redux-saga/effects';\nimport { watchFetchExampleTasks } from './features/tasks/tasksSaga';\n\nexport default function* rootSaga() {\n  yield all([\n    watchFetchExampleTasks(),\n  ]);\n};","import { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport tasksReducer from './features/tasks/tasksSlice';\nimport rootSaga from './rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = configureStore({\n  reducer: {\n    tasks: tasksReducer,\n  },\n  middleware: [sagaMiddleware],\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Normalize } from 'styled-normalize';\nimport { GlobalStyle } from './GlobalStyle';\nimport { ThemeProvider } from \"styled-components\";\nimport { Provider } from 'react-redux';\nimport { theme } from './theme';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <Normalize />\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}